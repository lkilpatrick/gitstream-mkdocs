{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Welcome to gitStream. This site will contain all the infomation you need to get started with gitStream and Contniuous Merge! Getting Started To get started with gitStream CM automation do the following: Step 0: choose a repo, or clone our playground repo: TODO: move this repo to public access We should move it to continuous merge git clone git@github.com:linear-b/gitstream-playground.git cd gitstream-playground Step 1: Create a .cm file in your repo root directory, you can use example below. You should create it at the following path .cm/.gitstream.cm - I would like a line by line explanation of this file eventually manifest: version: 1.0 checks: content: is: asset_only: {{ files | allExtensions(['png', 'svg', 'jpg', 'gif', 'css']) }} docs_only: {{ files | allExtensions(['md', 'txt']) }} tests_only: {{ files | allTests }} size: is: xsmall: {{ branch.diff.size < 20 }} small_or_less: {{ branch.diff.size < 50 }} medium_or_less: {{ branch.diff.size < 200 }} large: {{ branch.diff.size >= 200 }} automations: change_tests: on: [pull_request] rules: - rule: {{ checks.content.is.tests_only }} actions: - exec: hmarr/auto-approve-action@v2 with: github-token: ${{'{{'}} secrets.GITHUB_TOKEN {{'}}'}} - exec: actions-ecosystem/action-add-labels@v1 with: labels: tests docs_update: on: [pull_request] rules: - rule: {{ checks.content.is.docs_only }} actions: - exec: hmarr/auto-approve-action@v2 with: github-token: ${{'{{'}} secrets.GITHUB_TOKEN {{'}}'}} - exec: actions-ecosystem/action-add-labels@v1 with: labels: docs xsmall: on: [pull_request] rules: - rule: {{ checks.size.is.xsmall }} actions: - exec: actions-ecosystem/action-add-labels@v1 with: labels: xsmall large_change: on: [pull_request] rules: - rule: {{ checks.size.is.large }} actions: - exec: actions-ecosystem/action-add-labels@v1 with: labels: large Step 2: Create GitHub action workflow files by using the on-line generator (link) or download the cli tool (link). Place the action file at .github/workflows/gitstream.yml As an example for the above rules: name: gitStream 'on': - pull_request jobs: gitstream: runs-on: ubuntu-latest outputs: gate_change_tests_passed: ${{ steps.checks.outputs.gate_change_tests_passed }} gate_docs_update_passed: ${{ steps.checks.outputs.gate_docs_update_passed }} gate_xsmall_passed: ${{ steps.checks.outputs.gate_xsmall_passed }} gate_large_change_passed: ${{ steps.checks.outputs.gate_large_change_passed }} steps: - run: echo \"getting the repo code\" - name: Check out repository code uses: actions/checkout@v3 - name: Run gitstream checks uses: linear-b/actions/gitstream@v1 id: checks with: repo: ${{ github.repository }} branch: ${{ github.head_ref }} use_cache: true gate_change_tests: needs: gitstream if: needs.gitstream.outputs.gate_change_tests_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: hmarr/auto-approve-action@v2 with: github-token: ${{ secrets.GITHUB_TOKEN }} - uses: actions-ecosystem/action-add-labels@v1 with: labels: tests gate_docs_update: needs: gitstream if: needs.gitstream.outputs.gate_docs_update_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: hmarr/auto-approve-action@v2 with: github-token: ${{ secrets.GITHUB_TOKEN }} - uses: actions-ecosystem/action-add-labels@v1 with: labels: docs gate_xsmall: needs: gitstream if: needs.gitstream.outputs.gate_xsmall_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: actions-ecosystem/action-add-labels@v1 with: labels: xsmall gate_large_change: needs: gitstream if: needs.gitstream.outputs.gate_large_change_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: actions-ecosystem/action-add-labels@v1 with: labels: large Step 3: Commit these 2 files into your default branch, usually main or master branch. git add .cm/gitstream.cm git add .github/workflows/gitstream.yml git commit -m \"hello gitstream, goodbye toil\" git push For new branches, once you open a Pull Request the automation rules will be applied based on the checks results. Installation Configuration Understanding CM .CM file File Used YAML Conditions Gates Lanes Grammar Actions Commands Examples","title":"Introduction"},{"location":"#introduction","text":"Welcome to gitStream. This site will contain all the infomation you need to get started with gitStream and Contniuous Merge!","title":"Introduction"},{"location":"#getting-started","text":"To get started with gitStream CM automation do the following:","title":"Getting Started"},{"location":"#step-0","text":"choose a repo, or clone our playground repo: TODO: move this repo to public access We should move it to continuous merge git clone git@github.com:linear-b/gitstream-playground.git cd gitstream-playground","title":"Step 0:"},{"location":"#step-1","text":"Create a .cm file in your repo root directory, you can use example below. You should create it at the following path .cm/.gitstream.cm - I would like a line by line explanation of this file eventually manifest: version: 1.0 checks: content: is: asset_only: {{ files | allExtensions(['png', 'svg', 'jpg', 'gif', 'css']) }} docs_only: {{ files | allExtensions(['md', 'txt']) }} tests_only: {{ files | allTests }} size: is: xsmall: {{ branch.diff.size < 20 }} small_or_less: {{ branch.diff.size < 50 }} medium_or_less: {{ branch.diff.size < 200 }} large: {{ branch.diff.size >= 200 }} automations: change_tests: on: [pull_request] rules: - rule: {{ checks.content.is.tests_only }} actions: - exec: hmarr/auto-approve-action@v2 with: github-token: ${{'{{'}} secrets.GITHUB_TOKEN {{'}}'}} - exec: actions-ecosystem/action-add-labels@v1 with: labels: tests docs_update: on: [pull_request] rules: - rule: {{ checks.content.is.docs_only }} actions: - exec: hmarr/auto-approve-action@v2 with: github-token: ${{'{{'}} secrets.GITHUB_TOKEN {{'}}'}} - exec: actions-ecosystem/action-add-labels@v1 with: labels: docs xsmall: on: [pull_request] rules: - rule: {{ checks.size.is.xsmall }} actions: - exec: actions-ecosystem/action-add-labels@v1 with: labels: xsmall large_change: on: [pull_request] rules: - rule: {{ checks.size.is.large }} actions: - exec: actions-ecosystem/action-add-labels@v1 with: labels: large","title":"Step 1:"},{"location":"#step-2","text":"Create GitHub action workflow files by using the on-line generator (link) or download the cli tool (link). Place the action file at .github/workflows/gitstream.yml As an example for the above rules: name: gitStream 'on': - pull_request jobs: gitstream: runs-on: ubuntu-latest outputs: gate_change_tests_passed: ${{ steps.checks.outputs.gate_change_tests_passed }} gate_docs_update_passed: ${{ steps.checks.outputs.gate_docs_update_passed }} gate_xsmall_passed: ${{ steps.checks.outputs.gate_xsmall_passed }} gate_large_change_passed: ${{ steps.checks.outputs.gate_large_change_passed }} steps: - run: echo \"getting the repo code\" - name: Check out repository code uses: actions/checkout@v3 - name: Run gitstream checks uses: linear-b/actions/gitstream@v1 id: checks with: repo: ${{ github.repository }} branch: ${{ github.head_ref }} use_cache: true gate_change_tests: needs: gitstream if: needs.gitstream.outputs.gate_change_tests_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: hmarr/auto-approve-action@v2 with: github-token: ${{ secrets.GITHUB_TOKEN }} - uses: actions-ecosystem/action-add-labels@v1 with: labels: tests gate_docs_update: needs: gitstream if: needs.gitstream.outputs.gate_docs_update_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: hmarr/auto-approve-action@v2 with: github-token: ${{ secrets.GITHUB_TOKEN }} - uses: actions-ecosystem/action-add-labels@v1 with: labels: docs gate_xsmall: needs: gitstream if: needs.gitstream.outputs.gate_xsmall_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: actions-ecosystem/action-add-labels@v1 with: labels: xsmall gate_large_change: needs: gitstream if: needs.gitstream.outputs.gate_large_change_passed == 'true' runs-on: ubuntu-latest permissions: contents: read pull-requests: write steps: - uses: actions-ecosystem/action-add-labels@v1 with: labels: large","title":"Step 2:"},{"location":"#step-3","text":"Commit these 2 files into your default branch, usually main or master branch. git add .cm/gitstream.cm git add .github/workflows/gitstream.yml git commit -m \"hello gitstream, goodbye toil\" git push For new branches, once you open a Pull Request the automation rules will be applied based on the checks results.","title":"Step 3:"},{"location":"#installation","text":"","title":"Installation"},{"location":"#configuration","text":"","title":"Configuration"},{"location":"#understanding-cm","text":"","title":"Understanding CM"},{"location":"#cm-file","text":"","title":".CM file"},{"location":"#file-used","text":"","title":"File Used"},{"location":"#yaml","text":"","title":"YAML"},{"location":"#conditions","text":"","title":"Conditions"},{"location":"#gates","text":"","title":"Gates"},{"location":"#lanes","text":"","title":"Lanes"},{"location":"#grammar","text":"","title":"Grammar"},{"location":"#actions","text":"","title":"Actions"},{"location":"#commands","text":"","title":"Commands"},{"location":"#examples","text":"","title":"Examples"},{"location":"referecne/","text":"Configuring gitStream automation gitStream automation file This document is a reference for the gitStream 1.x, used in .cm/gitstream.cm file. Schema manifest version checks automations if run The manifest section The first section in a gitstream.cm is manifest . manifest: version: 1.0 The only field required is version . Key Required Type Description manifest Y Map version Y String Specify the .cm spec version: 0.1, 1.0 The manifest fields is used a version to parse the .cm file, so if breaking chnages are introdcued to the parser - older automation are still supported. The checks section The checks section defines conditions that are nested under the checks section. checks: size: is: xsmall: {{ branch.diff.size < 20 }} Each condition includes a logic expresison that eventually results with a boolean value: true or false . The logic expression are based on Jinja2 syntax, and includes gitStream context varaibales. The automations section The automations section defines the automations and their conditions. automations: mark_small_pr: if: - {{ checks.size.is.xsmall }} run: - action: gitstream:add-label@v1 args: - text: xsmall Each automation includes its name, and few fields: if and run . Key Required Type Description if Y Map List of condtions run Y Map The automation to run if all conditions are met The if field The if field includes the list of conditions. The condtions are checked when a pull request is opened or changed, if all the conditions pass, the automation is executed. The run field The run field includes the automation to execute. Key Required Type Description action Y String The action pointer args N Map The action inputs The action pointer is descibed by: provider:name@version Filters Filters are essentially functions that can be applied to variables. They are called with a pipe operator | and can take arguments. All nunjucks filters are supported, as well as gitStream built-in filters. You can also add custom filters byt editing the .cm/filters.js file. Context varaibales gitStream includes a collection of variables called contexts. These variables are intended for use with the checks condtions in the gitStream automation file . branch diff size","title":"Configuring gitStream automation"},{"location":"referecne/#configuring-gitstream-automation","text":"","title":"Configuring gitStream automation"},{"location":"referecne/#gitstream-automation-file","text":"This document is a reference for the gitStream 1.x, used in .cm/gitstream.cm file.","title":"gitStream automation file"},{"location":"referecne/#schema","text":"manifest version checks automations if run","title":"Schema"},{"location":"referecne/#the-manifest-section","text":"The first section in a gitstream.cm is manifest . manifest: version: 1.0 The only field required is version . Key Required Type Description manifest Y Map version Y String Specify the .cm spec version: 0.1, 1.0 The manifest fields is used a version to parse the .cm file, so if breaking chnages are introdcued to the parser - older automation are still supported.","title":"The manifest section"},{"location":"referecne/#the-checks-section","text":"The checks section defines conditions that are nested under the checks section. checks: size: is: xsmall: {{ branch.diff.size < 20 }} Each condition includes a logic expresison that eventually results with a boolean value: true or false . The logic expression are based on Jinja2 syntax, and includes gitStream context varaibales.","title":"The checks section"},{"location":"referecne/#the-automations-section","text":"The automations section defines the automations and their conditions. automations: mark_small_pr: if: - {{ checks.size.is.xsmall }} run: - action: gitstream:add-label@v1 args: - text: xsmall Each automation includes its name, and few fields: if and run . Key Required Type Description if Y Map List of condtions run Y Map The automation to run if all conditions are met","title":"The automations section"},{"location":"referecne/#the-if-field","text":"The if field includes the list of conditions. The condtions are checked when a pull request is opened or changed, if all the conditions pass, the automation is executed.","title":"The if field"},{"location":"referecne/#the-run-field","text":"The run field includes the automation to execute. Key Required Type Description action Y String The action pointer args N Map The action inputs The action pointer is descibed by: provider:name@version","title":"The run field"},{"location":"referecne/#filters","text":"Filters are essentially functions that can be applied to variables. They are called with a pipe operator | and can take arguments. All nunjucks filters are supported, as well as gitStream built-in filters. You can also add custom filters byt editing the .cm/filters.js file.","title":"Filters"},{"location":"referecne/#context-varaibales","text":"gitStream includes a collection of variables called contexts. These variables are intended for use with the checks condtions in the gitStream automation file . branch diff size","title":"Context varaibales"}]}